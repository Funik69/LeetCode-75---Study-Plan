class Solution {
public:
    bool isSubsequence(string s, string t) {
        int k=0;
        if(s.size()>t.size())
        return false;
        for(int i=0;i<t.size();i++){
            if(s[k]==t[i]){
                k++;
            }
        }
    return (k==s.size());}
};

//Using Dp if we face TLE due to constraints

class Solution {
public:
    int solve(string s,string t,int n,int m,vector<vector<int>>& dp){
        for(int i=0;i<n+1;i++){
            for(int j=0;j<m+1;j++){
                if(i==0 || j==0)
                    dp[i][j]=0;
                else if(s[i-1]==t[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                    dp[i][j]= max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[n][m];
    }
    bool isSubsequence(string s, string t) {
        int n=s.size();
        int m=t.size();
        vector<vector<int>> dp(n+1,vector<int> (m+1));
        if(solve(s,t,n,m,dp)==n){
            return true;
        }
        return false;
    }
};
