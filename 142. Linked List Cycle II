/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
bool isCycle(ListNode* head){
    ListNode* slow=head;
    ListNode* fast=head;
     while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast)
            return true;
        }
        return false;
}
    ListNode *detectCycle(ListNode *head) {
        if(!isCycle(head)){
            return NULL;
        }
        ListNode* slow=head;
        ListNode* fast=head;
        do{
            slow=slow->next;
            fast=fast->next->next;
        }while(slow!=fast);
        fast=head;
        while(slow->next!=fast->next){
            slow=slow->next;
            fast=fast->next;
        }
        //only for one case Input:
        // head = [1,2], pos = 0
        if(fast==fast->next->next)
        return fast;
        //this part 
        ListNode* newNode=fast->next;
     return newNode;}
};
